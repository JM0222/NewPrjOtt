#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('be:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io')(server, {
  cors: {
      origin: "http://localhost:3000",
      methods: ["GET", "POST"],
      transports: ['websocket', 'polling'],
      credentials: true
  },
  allowEIO3: true
});

let rooms = [];

//  입장인원 카운트 변수
var cnt1 = 0;
var cnt2 = 0;
var cnt3 = 0;
var cnt4 = 0;

io.on('connection' , function(socket) {
  console.log('Connect from Client: '+ socket)

  //  소켓 연결 시 방별 사용자 수 전송
  socket.emit('update', {
    cnt1: cnt1,
    cnt2: cnt2,
    cnt3: cnt3,
    cnt4: cnt4
  });
  console.log('접속시 : ' + cnt1 + cnt2 + cnt3 + cnt4)

  //  방 입장 ============================================
  socket.on('req_join_room', function(data){
    let roomName = data.roomName;
    if(!rooms.includes(roomName)) {
      rooms.push(roomName);
    }else{        
      // does nothing
    }
    //  roomName 이름의 방으로 접속
    socket.join(roomName);
    console.log(roomName + " 접속")

    //  roomName 별 접속자 수 카운트 +
    if(roomName == 'chat1'){
      cnt1++
    }else if(roomName == 'chat2'){
      cnt2++
    }else if(roomName == 'chat3'){
      cnt3++
    }else if(roomName == 'chat4'){
      cnt4++
    }

    //  welcome msg 전송
    var rtnMessage = {
        authName: data.authName,
        message: ' 님이 접속하셨습니다.',
    };

    //  접속자 수 업데이트
    socket.broadcast.emit('update', {
      cnt1: cnt1,
      cnt2: cnt2,
      cnt3: cnt3,
      cnt4: cnt4
    });
    console.log('입장시 : ' + cnt1 + cnt2 + cnt3 + cnt4)
    socket.to(roomName).emit('noti_join_room', rtnMessage);
  });

  //  방 퇴장 ============================================
  socket.on('req_exit_room', function(data){
    var roomName = data.roomName;

    //  roomName 별 접속자 수 카운트 -
    if(roomName == 'chat1'){
      cnt1--;
    }else if(roomName == 'chat2'){
      cnt2--;
    }else if(roomName == 'chat3'){
      cnt3--;
    }else if(roomName == 'chat4'){
      cnt4--;
    }

    //  접속자 수 업데이트
    socket.broadcast.emit('update', {
      cnt1: cnt1,
      cnt2: cnt2,
      cnt3: cnt3,
      cnt4: cnt4
    });
    console.log('퇴장시 : ' + cnt1 + cnt2 + cnt3 + cnt4)

    //  방에 접속한 사용자에게 퇴장메세지 전송
    var rtnMessage = {
      authName: data.authName,
      message: ' 님이 퇴장하셨습니다.',
    };
    socket.to(roomName).emit('noti_exit_room', rtnMessage);
  });

  //  메세지 전송 ============================================
  socket.on('chatMsg', function(data){
    console.log('message from Client: ' + data.message)
    console.log('name from : ' + data.authName)

    var rtnMessage = {
        message: data.message,
        authName: data.authName
    };

    // 클라이언트에게 메시지를 전송한다
    socket.to(data.roomName).emit('getMsg', rtnMessage);
  });

})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}